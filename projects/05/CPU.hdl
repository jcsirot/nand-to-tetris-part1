// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInst);
    Or(a=isAInst, b=instruction[5], out=loadA); // loadA if A-Inst or C-Inst bit d3 = 1
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=inA);
    ARegister(in=inA, load=loadA, out=A, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=loadD); // loadD if C-Inst and bit d2 = 1
    DRegister(in=ALUOut, load=loadD, out=D);

    Mux16(a=A, b=inM, sel=instruction[12], out=AOrM); // y input of ALU

    ALU(x=D, y=AOrM, 
        zx=instruction[11], nx=instruction[10], // zx = C-Inst bit c1, nx = C-Inst bit c2
        zy=instruction[9], ny=instruction[8], // zy = C-Inst bit c3, ny = C-Inst bit c4
        f=instruction[7], no=instruction[6], // f = C-Inst fit c5, no = C-Inst bit c6
        out=ALUOut, out=outM, zr=zr, ng=ng);

    And(a = instruction[15], b = instruction[3], out = writeM); // writeM if C-Inst and bit d3 = 1

    // Jump handling
    And(a = instruction[2], b = ng, out = tstJ1);
    And(a = instruction[1], b = zr, out = tstJ2);
    Not(in=ng, out=pos);
    Not(in=zr, out=nzr);
    And(a=pos, b=nzr, out=stricPos);
    And(a = instruction[0], b = stricPos, out = tstJ3);
    Or(a=tstJ1, b=tstJ2, out=tstJ12);
    Or(a=tstJ12, b=tstJ3, out=tstJ123);
    And(a=tstJ123, b=instruction[15], out=loadPC); // JMP if one of C-Inst j1, j2 or j3 are set 

    PC(in=A, load=loadPC, inc=true, reset=reset, out[0..14]=pc); // PC Register
}
